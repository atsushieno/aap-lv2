diff --git a/cmake/SfizzConfig.cmake b/cmake/SfizzConfig.cmake
index 95b0adaa..e917fac5 100644
--- a/cmake/SfizzConfig.cmake
+++ b/cmake/SfizzConfig.cmake
@@ -89,8 +89,18 @@ if (SFIZZ_USE_VCPKG OR CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
     target_include_directories(sfizz-sndfile INTERFACE "${SNDFILE_INCLUDE_DIR}")
     target_link_libraries(sfizz-sndfile INTERFACE SndFile::sndfile)
 else()
+    if (ANDROID)
+        get_filename_component (LV2_DEP_DIST "${CMAKE_CURRENT_LIST_DIR}}/../../../dependencies/lv2-deps/dist/${CMAKE_ANDROID_ARCH_ABI}" ABSOLUTE)
+        get_filename_component (SFIZZ_DEPS_DIST "${CMAKE_CURRENT_LIST_DIR}}/../../../dependencies/sfizz-deps/dist/${CMAKE_ANDROID_ARCH_ABI}" ABSOLUTE)
+        set (ENV{PKG_CONFIG_PATH} "${LV2_DEP_DIST}/lib/pkgconfig:${SFIZZ_DEPS_DIST}/lib/pkgconfig")
+    endif (ANDROID)
+
     find_package(PkgConfig REQUIRED)
     pkg_check_modules(SNDFILE "sndfile" REQUIRED)
+    if (ANDROID) # FIXME: it is kind of hack, we should resort to pkg-config...
+        target_include_directories(sfizz-sndfile INTERFACE ${LV2_DEP_DIST}/include ${SFIZZ_DEPS_DIST}/include)
+        link_directories(${LV2_DEP_DIST}/lib ${SFIZZ_DEPS_DIST}/lib)
+    endif (ANDROID)
     target_include_directories(sfizz-sndfile INTERFACE ${SNDFILE_INCLUDE_DIRS})
     if (SFIZZ_STATIC_DEPENDENCIES)
         target_link_libraries(sfizz-sndfile INTERFACE ${SNDFILE_STATIC_LIBRARIES})
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 7ffd3c1f..c988ea1b 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -211,6 +211,13 @@ target_include_directories (sfizz_parser PUBLIC sfizz)
 target_include_directories (sfizz_parser PUBLIC external)
 target_link_libraries (sfizz_parser PUBLIC absl::strings PRIVATE absl::flat_hash_map)
 
+if (ANDROID)
+    get_filename_component(AAP_ANDROID_PLAT_INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR}/../../../../android-audio-plugin-framework/native/androidaudioplugin/android/include ABSOLUTE)
+    get_filename_component(AAP_REF_LIB_DIR ${CMAKE_CURRENT_LIST_DIR}/../../../../android-audio-plugin-framework/java/androidaudioplugin/build/intermediates/library_jni/debug/jni/${CMAKE_ANDROID_ARCH_ABI} ABSOLUTE)
+
+    target_include_directories (sfizz_parser PUBLIC "${AAP_ANDROID_PLAT_INCLUDE_DIR}")
+endif()
+
 # Sfizz static library
 add_library(sfizz_static STATIC)
 target_sources(sfizz_static PRIVATE
@@ -219,6 +226,11 @@ target_include_directories (sfizz_static PUBLIC .)
 target_include_directories (sfizz_static PUBLIC external)
 target_link_libraries (sfizz_static PUBLIC absl::strings absl::span)
 target_link_libraries (sfizz_static PRIVATE sfizz_parser absl::flat_hash_map Threads::Threads sfizz-sndfile sfizz-pugixml sfizz-spline sfizz-tunings sfizz-kissfft sfizz-cpuid sfizz-jsl sfizz-atomic)
+if (ANDROID)
+    target_include_directories (sfizz_static PUBLIC "${AAP_ANDROID_PLAT_INCLUDE_DIR}")
+    target_link_directories (sfizz_static PUBLIC "${AAP_REF_LIB_DIR}")
+    target_link_libraries(sfizz_static PRIVATE android androidaudioplugin)
+endif()
 set_target_properties (sfizz_static PROPERTIES OUTPUT_NAME sfizz PUBLIC_HEADER "sfizz.h;sfizz.hpp")
 if (WIN32)
     target_compile_definitions (sfizz_static PRIVATE _USE_MATH_DEFINES)
@@ -258,6 +270,11 @@ if (SFIZZ_SHARED)
     target_include_directories (sfizz_shared PRIVATE .)
     target_include_directories (sfizz_shared PRIVATE external)
     target_link_libraries (sfizz_shared PRIVATE absl::strings absl::span sfizz_parser absl::flat_hash_map Threads::Threads sfizz-sndfile sfizz-pugixml sfizz-spline sfizz-tunings sfizz-kissfft sfizz-cpuid sfizz-jsl sfizz-atomic)
+    if (ANDROID)
+        target_include_directories (sfizz_shared PUBLIC "${AAP_ANDROID_PLAT_INCLUDE_DIR}")
+        target_link_directories (sfizz_shared PUBLIC "${AAP_REF_LIB_DIR}")
+        target_link_libraries(sfizz_shared PRIVATE android androidaudioplugin)
+    endif()
     if (WIN32)
         target_compile_definitions (sfizz_shared PRIVATE _USE_MATH_DEFINES)
     endif()
diff --git a/src/sfizz/Config.h b/src/sfizz/Config.h
index e99c83b3..c02003dd 100644
--- a/src/sfizz/Config.h
+++ b/src/sfizz/Config.h
@@ -28,7 +28,7 @@ namespace config {
     constexpr float defaultSampleRate { 48000 };
     constexpr float maxSampleRate { 192000 };
     constexpr int defaultSamplesPerBlock { 1024 };
-    constexpr int maxBlockSize { 8192 };
+    constexpr int maxBlockSize { 65536 };
     constexpr int bufferPoolSize { 6 };
     constexpr int stereoBufferPoolSize { 4 };
     constexpr int indexBufferPoolSize { 2 };
diff --git a/src/sfizz/parser/Parser.cpp b/src/sfizz/parser/Parser.cpp
index 9ed460c2..717ede5a 100644
--- a/src/sfizz/parser/Parser.cpp
+++ b/src/sfizz/parser/Parser.cpp
@@ -90,6 +90,18 @@ void Parser::includeNewFile(const fs::path& path, std::unique_ptr<Reader> reader
         return;
     }
 
+#if ANDROID
+    if (!reader) {
+        auto assetReader = absl::make_unique<AndroidAssetReader>(fullPath);
+        if (assetReader->hasError()) {
+            SourceLocation loc = assetReader->location();
+            emitError(makeErrorRange(), "Cannot open Android asset for reading: " + fullPath.string());
+            return;
+        }
+        reader = std::move(assetReader);
+    }
+#endif
+
     if (!reader) {
         auto fileReader = absl::make_unique<FileReader>(fullPath);
         if (fileReader->hasError()) {
diff --git a/src/sfizz/parser/ParserPrivate.cpp b/src/sfizz/parser/ParserPrivate.cpp
index 38a99059..78064f9d 100644
--- a/src/sfizz/parser/ParserPrivate.cpp
+++ b/src/sfizz/parser/ParserPrivate.cpp
@@ -5,6 +5,7 @@
 // If not, contact the sfizz maintainers at https://github.com/sfztools/sfizz
 
 #include "ParserPrivate.h"
+#include <jni.h>
 
 namespace sfz {
 
@@ -124,9 +125,47 @@ void Reader::updateSourceLocationRemoving(int byte)
 
 //------------------------------------------------------------------------------
 
+#if ANDROID
+AndroidAssetReader::AndroidAssetReader(const fs::path &filePath)
+        : Reader(filePath)
+{
+    auto ctx = aap::get_android_application_context();
+    if (!ctx)
+        return;
+    auto jvm = aap::get_android_jvm();
+    jvm->functions->AttachCurrentThread(jvm, &_env, nullptr);
+    auto assetManager = aap::get_android_asset_manager(_env);
+    int offset = filePath.has_filename() && filePath.string()[0] == '/' ? 1 : 0;
+    _asset = AAssetManager_open(assetManager, filePath.c_str() + offset, AASSET_MODE_RANDOM);
+}
+
+AndroidAssetReader::~AndroidAssetReader() noexcept
+{
+    if (_asset)
+        AAsset_close(_asset);
+    auto jvm = aap::get_android_jvm();
+    jvm->functions->DetachCurrentThread(jvm);
+}
+
+int AndroidAssetReader::getNextStreamByte()
+{
+    uint8_t b;
+    if (AAsset_read(_asset, &b, 1) == 1)
+        return b;
+    return -1;
+}
+
+bool AndroidAssetReader::hasError()
+{
+    return _asset == nullptr;
+}
+
+#endif
+
 FileReader::FileReader(const fs::path& filePath)
     : Reader(filePath), _fileStream(filePath)
 {
+    assert(false);
 }
 
 bool FileReader::hasError()
diff --git a/src/sfizz/parser/ParserPrivate.h b/src/sfizz/parser/ParserPrivate.h
index 7e271e26..5f75a164 100644
--- a/src/sfizz/parser/ParserPrivate.h
+++ b/src/sfizz/parser/ParserPrivate.h
@@ -11,6 +11,13 @@
 #include <string>
 #include <fstream>
 
+#if ANDROID
+#include <jni.h>
+#include <android/asset_manager.h>
+#include <android/asset_manager_jni.h>
+#include "aap/android-context.h"
+#endif
+
 namespace sfz {
 
 /**
@@ -104,6 +111,22 @@ private:
     std::vector<int> _lineNumColumns;
 };
 
+#if ANDROID
+class AndroidAssetReader : public Reader {
+public:
+    explicit AndroidAssetReader(const fs::path& filePath);
+    virtual ~AndroidAssetReader() noexcept;
+    bool hasError();
+
+protected:
+    int getNextStreamByte() override;
+
+private:
+    JNIEnv* _env;
+    AAsset* _asset;
+};
+#endif
+
 /**
  * @brief File-based version of Reader.
  */
