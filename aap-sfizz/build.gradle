plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 29
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                arguments "-DENABLE_LTO=off", "-DSFIZZ_VST=off", "-DSFIZZ_LV2_UI=off", "-DSFIZZ_JACK=off", "-DSFIZZ_RENDER=off", "-DSFIZZ_SHARED=off", "-DSFIZZ_STATIC_LIBSNDFILE=on"
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    externalNativeBuild {
        cmake {
            path "../dependencies/sfizz/CMakeLists.txt"
        }
    }

    aaptOptions {
        noCompress 'wav'
    }

    packagingOptions {
        //doNotStrip "*/*/*.so" // debuggable!
    }
}

dependencies {
    implementation project(':androidaudioplugin-lv2')
    implementation project(':androidaudioplugin-ui-androidx')
    implementation 'androidx.appcompat:appcompat:1.2.0'

    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task copyLv2Manifests(type: Copy) {
    from(".cxx/cmake/debug/x86/sfizz.lv2") {
        exclude '**/*.so'
    }
    into 'src/main/assets/lv2/sfizz.lv2'
}

task deleteLV2Manifests(type: Delete) {
    delete 'src/main/assets/lv2/sfizz.lv2'
}

tasks.whenTaskAdded { task ->
    if (task.name == "packageDebug" || task.name == "packageRelease")
        task.dependsOn copyLv2Manifests
    // FIXME: it's hacky, but `clean` didn't work.
    if (task.name == "externalNativeBuildCleanDebug" || task.name == "externalNativeBuildCleanRelease")
        task.dependsOn deleteLV2Manifests
}
